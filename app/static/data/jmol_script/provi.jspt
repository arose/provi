

function provi_init(){
    provi_data = {};
    provi_datasets = {};
    provi_property = {}; # not used?
    provi_selection = {};
    provi_settings = {};
    provi_uid_counter = 0;
    provi_settings_init();
    provi_bind_init();
    provi_iso_slab_id = false;
}


function provi_uid(){
    provi_uid_counter = 1*(provi_uid_counter) + 1;
    return provi_uid_counter;
}


function provi_require( script ){
    #TODO
    #provi_scripts[ script ]
}


function provi_sele_or( name_list ){
    var sele = { none };
    for(var name in name_list){
        var tmp_sele = { @provi_selection[name] };
        sele = { @sele OR @tmp_sele };
    }
    return sele;
}


function provi_bind_init(){
    unbind "WHEEL";
    bind "WHEEL" "provi_zslab( _DELTAY )";
    bind "SHIFT-WHEEL" "provi_zslab2( _DELTAY )";

    unbind "MIDDLE-DRAG";
    bind "MIDDLE-DRAG" "_translate";
    bind "MIDDLE-CLICK" "if(_ATOM){ provi_center( _ATOM ) }";

    unbind "SINGLE-RIGHT-DOWN";
    bind "SINGLE-RIGHT-DRAG" "_rotateZorZoom";
    #bind "SINGLE-RIGHT-CLICK" "print 'foo'";
    bind "SHIFT-SINGLE-RIGHT-DOWN" "_popupMenu";

    #unbind "LEFT-SINGLE";
    #bind "LEFT-SINGLE" "_rotate";
    #bind "LEFT-SINGLE" "_selectToggle";
    #bind "LEFT-SINGLE" "_slideZoom";
    #unbind "DOUBLE-LEFT";
}


function provi_highlight( sele ){
    # todo: ensure visibility/display
    var saved_colors = sele.color.all;
    var dt = 0.07;
    var colr = provi_get( "highlightColor" );
    for( var i=0; i<3; ++i){
        color {@sele} @colr;
        delay @dt;
        sele.color = saved_colors;
        delay @dt;
    }
}


function provi_zoom( delta_y ){
    zoom + @delta_y;
}


function provi_center( sele ){
    centerAt absolute @{ {sele}.XYZ };
    provi_zslab( 0 );
    if( provi_iso_slab_id ){
        isosurface ID @provi_iso_slab_id;
        isosurface SLAB NONE;
        isosurface SLAB WITHIN 8.0 {sele};
    }
}


function provi_zslab( delta_y ){
    set slabEnabled true;
    set zShade true;
    if( delta_y!=0 ){
        set zSlab @{zSlab + delta_y/abs(delta_y)}; 
    }
    if(zSlab<=0){ set zSlab 0 } 
    if(zSlab>=100){ set zSlab 100 }
    set slab @{100 - zSlab};
    set zDepth @{zSlab - 30};
    if(zDepth<=0){ set zDepth 0 } 
    if(zDepth>=100){ set zDepth 100 }
    if(zSlab==0 && zDepth==0){ set zSlab 1 }
    if(zSlab>55 && zDepth>25){ 
        set zSlab 55;
        set zDepth 25;
    }
    #todo: notify provi
}


function provi_zslab2( delta_y ){
    set slabEnabled true;
    set zShade true;
    if( delta_y<0 ){
        set slab @{slab - delta_y/abs(delta_y)};
        if( slab>=100 ){
            set zSlab @{zSlab - delta_y/abs(delta_y)};
        }
    }
    if( delta_y>0 ){
        set zSlab @{zSlab - delta_y/abs(delta_y)};
        if( zSlab<=0 ){
            set slab @{slab - delta_y/abs(delta_y)};
        }
    }
    if(zSlab<0){ set zSlab 0; } 
    if(zSlab>100){ set zSlab 100; }
    if(slab<0){ set slab 0; } 
    if(slab>100){ set slab 100; }
    if(zSlab==0 && zDepth==0){ set zSlab 1 }
}


function provi_settings_init(){
    set slab 100;
    set zSlab 30;
    set zShade true;
    set hoverDelay 0.1;
    set mousedragFactor 4.0;
    set mousewheelFactor 1.2;
    set selectionHalos true;
    set highResolution true;
    set picking "group";
    set useArcBall true;
    provi_set( "largeAtomCount", false, false, true );
    provi_set( "selectionHalosColor", "green" );
    provi_set( "highlightColor", "yellow" );
    provi_set( "cartoon", 0.8, false, true );
    provi_set( "trace", 0.3, false, true );
    provi_set( "line", 0.01, false, true );
    provi_set( "stick", 0.15, false, true );
    provi_set( "cpk", 20, false, true );
    provi_set( "spacefill", 0.5, false, true );
    provi_set( "backbone", 0.3, false, true );
    provi_set( "sidechainHelper", false );
    provi_set( "style", "default" );
}


function provi_dataset_loaded( dataset_id ){
    var js = "jmol_dataset_loaded(" + dataset_id + ", 'loaded')";
    print "dataset_id " + dataset_id;
    javascript @js;
}


function provi_load_property( url, sele, dataset_id ){
    if( !url ) return false;
    if( !sele ) sele = {*};
    var x = load( url );
    var line1_end = x.find("\n");
    var line1 = x[1][line1_end-1];
    var columns = line1.split(" ");
    d = x[line1_end][0];
    var i = 0;
    names = [];
    select @sele;
    for(var c in columns){
        i = i+1;
        var c2 = c.split("#");
        var name = "property_" + c2[1] + "_" + dataset_id;
        names = names + name;
        var s = 'DATA "' + name + ' 0 ' + i + ' @d";';
        s += "{ @sele and " + name + " = " + c2[2] + " }." + name + " = NaN;";
        script INLINE @s;
    }
    if( dataset_id ){
        provi_datasets[ dataset_id ] = names;
        provi_dataset_loaded( dataset_id );
    }
    select none;
    return true;
}


function provi_load_selection( url, dataset_id, startsele ){
    if( !url ) return false;
    var start = false;
    if( startsele ){
        var t = {@startsele};
        start = t[1].atomindex;
    }
    var x = load( url );
    var lines = x.split();
    var names = [];
    for(var l in lines){
        var fields = l.split(" ");
        var name = fields[1] + "_" + dataset_id;
        names = names + name;
        var d = fields[2][0];
        if( start ){
            d = d.mul(1).add(start).trim("0").trim(".");
        }
        var sele = "({" + d.join(" ") + "})";
        provi_selection[name] = sele;
    }
    if( dataset_id ){
        provi_datasets[ dataset_id ] = names;
        provi_dataset_loaded( dataset_id );
    }
    subset;
    return true;
}


function provi_load_bonds( url, hide_initially, dataset_id ){
    if( !url ) return false;
    var x = load( url ); # must be global for script INLINE; TODO???
    var bond_count_before = {*}.bonds.size;
    script INLINE @x;
    var bond_count_after = {*}.bonds.size;
    var bs = "[{" + (bond_count_before) + ":" + (bond_count_after-1) + "}]";
    if( hide_initially ) hide add @bs;
    if( dataset_id ){
        provi_datasets[ dataset_id ] = bs;
        provi_dataset_loaded( dataset_id );
    }
    return true;
}


function provi_load_vector( url, scale2, id, colr, diameter, scale ){
    if( !url ) return false;
    var x = load( url );
    var line1_end = x.find("\n");
    var line1 = x[1][line1_end-1];
    script INLINE @line1;
    if(!id) id = "vec";
    if(!colr) colr = "red";
    if(!diameter) diameter = 0.15;
    if(!scale) scale = 1.0;
    if(scale2) scale = scale2;
    var d = x[line1_end][0];
    var i = 0;
    for(var l in d.split('\n')){
        var row = l.split(" ");
        var atm = "({" + row[1] + "})";
        var vec = "{" + row[2] + " " + row[3] + " " + row[4] + "}";
        draw ID @{id+i} vector @atm @vec color @colr diameter @diameter scale @scale;
        ++i;
    }
    return true;
}


function provi_load_distance( url ){
    if( !url ) return false;
    var x = load( url );
    var line1_end = x.find("\n");
    var line1 = x[1][line1_end-1];
    script INLINE @line1;
    var d = x[line1_end][0];
    var i = 0;
    for(var l in d.split('\n')){
        var row = l.split(" ");
        var atm = "({" + row[1] + "})";
        var vec = "{" + row[2] + " " + row[3] + " " + row[4] + "}";
        draw ID @{id+i} vector @atm @vec color @colr diameter @diameter scale @scale;
        ++i;
    }
    return true;
}


function provi_load_structure( script, style, dataset_id ){
    script INLINE @script;
    var current_file_number = _currentFileNumber;
    
    subset file = _currentFileNumber;
    provi_settings_init();
    if( style ){
        script INLINE @style;
    }else{
        provi_style();
    }
    frame all;
    subset;
    
    if( dataset_id ){
        provi_datasets[ dataset_id ] = current_file_number;
        provi_dataset_loaded( dataset_id );
    }
}


function provi_load_isosurface(){
    
}


function provi_write_pdb( sele ){
    save selection tmp_pdb;
    select sele;
    var d = write("pdb").split("\n");
    restore selection tmp_pdb;
    return d;
}


function provi_sele_test( ids ){
    var sele_l = [];
    var displayed_l = [];
    for(var id in ids){
        sele_l += provi_selection[id].selected.join("");
    }
    return [ sele_l.average, displayed_l.average ];
}


function sort_by_prop( sele, prop ){
    var x = sele.atomindex.all;
    var prop_arr = [];
    var s = "prop_arr = sele." + prop + ".all;";
    script INLINE @s;
    var n = x.length;
    for( var i = 1; i<=n; ++i ){
        x[i] = [ x[i], prop_arr[i] ];
    }
    unset prop_arr;
    x.sort(2);
    for( var i = 1; i<=n; ++i ){
        x[i] = (x[i])[1];
    }
    return x;
}


function range( n ){
    var l = [];
    for(var i=1; i<=n; ++i){
        l[i] = i;
    }
    return l;
}


function provi_sele_intersect( id, id2 ){
    var sele1 = provi_selection[id];
    var sele2 = provi_selection[id2];
    return { sele1 and sele2 }.length;
}


function is_provi_setting( name ){
    if( name=="largeAtomCount" || name=="cartoon" || name=="trace" || 
        name=="line" || name=="stick" || name=="cpk" || name=="spacefill" || 
        name=="backbone" || name=="sidechainHelper" || 
        name=="selectionHalosColor" || name=="style" || 
        name=="highlightColor" ){
        return true;
    }else{
        return false;
    }
}


function is_provi_style( name ){
    if( name=="line" || name=="cartoon" || name=="trace" || 
        name=="stick" || name=="cpk" || name=="spacefill" || 
        name=="backbone" || name=="largeAtomCount" || 
        name=="sidechainHelper" ){
        return true;
    }else{
        return false;
    }
}


function provi_get( name ){
    if( name=="selectionHalosColor" ){
        // how to get the color?
        var value = provi_settings[ name ];
        if( value.type=="string" ){
            value = value.trim('"');
        }
        return value;
    }else if( is_provi_setting( name ) ){
        var value = provi_settings[ name ];
        if( value.type=="string" ){
            value = value.trim('"');
        }
        return value;
    }else{
        tmp = '';
        var s = "tmp = " + name + ";";
        script INLINE @s;
        return tmp;
    }
}


function provi_set( name, value, message, nostyle ){
    tmp = value;
    if( name=="selectionHalosColor" ){
        color selectionHalos @value;
        provi_settings[ name ] = value;
    }else if( name=="style" ){
        provi_style( value );
        provi_settings[ name ] = value;
    }else if( is_provi_setting( name ) ){
        provi_settings[ name ] = value;
    }else{
        if( value.type=="string" ){
            value = "'" + value + "'";
        }
        var s = "set " + name + " " + value + ";";
        script INLINE @s;
        tmp = '';
        s = "tmp = " + name + ";";
        script INLINE @s;
    }
    if( !nostyle && is_provi_style( name )  ){
        provi_style( provi_get( "style" ) );
    }
    if( message ){
        var js = "jmol_setting_changed('" + name + "', '" + tmp + "', '" + value + "')";
        javascript @js;
    }
}





# geometry

function norm(v){
    return v/v;
}


function vec_mag(v){
    return sqrt( v.X*v.X + v.Y*v.Y + v.Z*v.Z );
}


function vec_angle(v1, v2){
    var ang = acos( (v1*v2) / ( vec_mag(v1)*vec_mag(v2) ) );
    if( ang > 90 ) ang = 180-ang;
    return ang;
}


function lsq(x, y) {
    var n = x.length;
    if (n != y.length || n == 0) return false;
    var sum_x = x.sum;
    var sum_y = y.sum;
    var sum_xy = 0;
    var sum_xx = 0;
    for (var i = 1; i <= n; i++) {
        sum_xx += x[i]*x[i];
        sum_xy += x[i]*y[i];
    }
    # y = x * m + b
    var m = (n*sum_xy - sum_x*sum_y) / (n*sum_xx - (sum_x**2));
    var b = (sum_y*sum_xx - sum_x*sum_xy) / (n*sum_xx - (sum_x**2));
    return [ x[1]*m+b, x[n]*m+b ];
}


function axis_angle( sele1, sele2, draw ){
    var m = compare( sele1, sele2 );
    message @sele1;
    message @sele2;
    message @m;
    var q = quaternion( m%1 );
    var axis = q%-1;
    var angl = q%-2;
    var centr2 = { @sele2 }.XYZ;
    var ap = centr2 + axis*10;
    message @axis;
    message @angl;
    #select within(GROUP, sele2);
    #translateSelected @{m%2*-1};
    #rotateSelected @centr2 @ap @angl;
    #select none;
    var centr = { @sele1 or @sele2 }.XYZ;
    if( draw ){
        draw ID "origin" @centr diameter 5.0;
        draw ID "axis" vector @centr @{axis} scale 150.0 diameter 0.3;
        draw ID "axis2" vector @centr @{axis*-1} scale 150.0 diameter 0.3;
    }
    return [ axis, angl, centr ];
}


# style

function provi_style( name ){
    if( name=="lines" ){
        select protein or nucleic; 
            wireframe @{-provi_get("line")};
    }else if( name=="sticks" ){
        select protein or nucleic; 
            wireframe @{-provi_get("stick")};
    }else if( name=="cpk" ){
        select protein or nucleic; 
            wireframe @{-provi_get("stick")};
            cpk @{provi_get("cpk")}%;
    }else if( name=="spacefill" ){
        select protein or nucleic; 
            cpk only 100%;
    }else if( name=="backbone" ){
        select protein or nucleic; 
            backbone @{-provi_get("backbone")};
    }else if( name=="backbone+lines" ){
        select protein or nucleic; 
            backbone @{-provi_get("backbone")}; 
        select @{provi_sidechain_helper_sele()}; 
            wireframe @{provi_get("line")};
    }else if( name=="backbone+sticks" ){
        select protein or nucleic; 
            backbone @{-provi_get("backbone")}; 
        select @{provi_sidechain_helper_sele()}; 
            wireframe @{provi_get("stick")};
    }else if( name=="backbone+cpk" ){
        select protein or nucleic; 
            backbone @{-provi_get("backbone")}; 
            cpk @{provi_get("cpk")}%; 
        select @{provi_sidechain_helper_sele()}; 
            wireframe @{provi_get("stick")};
    }else if( name=="trace" ){
        select protein or nucleic; 
            trace only; 
            {protein or nucleic}.trace = @{provi_get("trace")};
    }else if( name=="tube" ){
        select protein or nucleic; 
            trace only; 
            {protein or nucleic}.trace = for(x;{protein or nucleic};x.temperature/100);
    }else if( name=="tube10" ){
        select *; 
            trace only; {*}.trace = for(x;{*};x.temperature*10);
    }else if( name=="tube8" ){
        select *; 
            trace only; {*}.trace = for(x;{*};x.temperature*8);
    }else if( name=="tube5" ){
        select *; 
            trace only; {*}.trace = for(x;{*};x.temperature*5);
    }else if( name=="ribbon" ){
        select protein; 
            ribbon only; 
        select helix or sheet; 
            ribbon @{provi_get("cartoon")}; 
        select nucleic; 
            cartoon only;
    }else if( name=="cartoon" ){
        select protein; 
            cartoon only; 
        select helix or sheet; 
            cartoon @{provi_get("cartoon")}; 
        select nucleic; 
            cartoon only;
    }else if( name=="cartoon+lines" ){
        select protein; 
            cartoon only; 
        select nucleic; 
            cartoon only;
        select @{provi_sidechain_helper_sele()}; 
            wireframe @{provi_get("line")}; 
        select helix or sheet; 
            cartoon @{provi_get("cartoon")};
    }else if( name=="cartoon+sticks" ){
        select protein; 
            cartoon only; 
        select nucleic; 
            cartoon only;
        select @{provi_sidechain_helper_sele()}; 
            wireframe @{provi_get("stick")}; 
        select helix or sheet; 
            cartoon @{provi_get("cartoon")};
    }else if( name=="cartoon+cpk" ){
        select protein; 
            cartoon only; 
        select nucleic; 
            cartoon only;
        select @{provi_sidechain_helper_sele()}; 
            wireframe @{provi_get("stick")}; 
            cpk @{provi_get("cpk")}%; 
        select helix or sheet; 
            cartoon @{provi_get("cartoon")};
    }else if( name=="cartoon+aromatic" ){
        select protein; 
            cartoon only; 
        select nucleic; 
            cartoon only; 
        select @{provi_sidechain_helper_sele()}; 
        select helix or sheet; 
            cartoon @{provi_get("cartoon")}; 
        select aromatic; 
            wireframe @{provi_get("stick")};
    }else{
        name = "default";
        select protein; 
            cartoon only; 
        select helix or sheet; 
            cartoon @{provi_get("cartoon")};
        select nucleic;
            cartoon only;
        select (ligand or ace or ((gmy or gpl) and (sidechain or *.N or *.CA)) or ((gpl or cyg or ypl or yfa or lrt or lrd) and sidechain) ); 
            wireframe @{provi_get("stick")};
            spacefill @{provi_get("spacefill")};
        select (gpl or ypl or cyg or yfa or lrt or lrd) and (sidechain or *.CA); 
            wireframe @{provi_get("stick")};
        select water; 
            wireframe @{provi_get("line")};
        select HOH; 
            cpk @{provi_get("cpk")}%;
        select (hetero and not(ret or plm or ace or lrt or lrd or ypl or cyg or gmy or yfa or gpl)) or within(GROUP, connected(hetero and not(ret or plm or ace or lrt or lrd or ypl or gmy or yfa or gpl))); 
            wireframe @{provi_get("stick")};
        select (ace) or (within(GROUP, connected(ace)) and (*.N or *.CA)); 
            wireframe @{provi_get("stick")};
        select ((ret or plm or ger) and hetero) or (within(GROUP, connected(ret or plm or ger)) and (sidechain or *.CA)); 
            wireframe @{provi_get("stick")};
        select (dmpc or dmp or popc or pop); 
            wireframe @{provi_get("stick")};
    }
    if( provi_get("largeAtomCount") ){
        select protein or nucleic; 
            cartoon off; 
            backbone @{provi_get("backbone")};
    }
    select none;
}


function provi_sidechain_helper_sele(){
    if( provi_get( "sidechainHelper" ) ){
        return { (protein or nucleic) and (sidechain or *.CA or (pro and *.N)) };
    }else{
        return { (protein or nucleic) };
    }
}







