


function draw_intersection( plane, point, color ){
    if( !color ) color = 'green';
    var i= intersection(point, plane);
    var name = "i_" + provi_uid();
    #draw id @name @i radius 0.2 color @color;
    return i;
}

function draw_bond_intersection( plane, p1, p2 ){
    var i1= intersection(p1, plane);
    var i2= intersection(p2, plane);
    var name = "bi_" + provi_uid();
    #draw id @name @i1 @i2 radius 0.1 color lightgreen;
}

function view_plane( p ){
    var p = {*}.XYZ;
    var dp = _depthPlane;
    var vp = (dp%4);
    var vpx1 = norm( cross( vp, {1,0,0} ) );
    var vpx2 = norm( cross( vp, vpx1 ) );
    var pl = plane( p, p+vpx1, p+vpx2 );
    
    #isosurface id "p" plane @pl color blue translucent
    #select *;
    #draw id "p" intersection boundbox;
    #select none;
    return pl;
}

function mindist( s1, s2 ){
    var min_dist = 10000;
    var min_contact = false;
    for( a1 in s1 ){
        for( a2 in s2 ){
            var d = distance( a1, a2 );
            if( d<min_dist ){
                min_dist = d;
                min_contact = [ d, a1.atomno, a2.atomno ];
            }
        }
    }
    return min_contact;
}

function array_to_json( arr, lvl ){
    if( !lvl ) lvl = 0;
    if( arr.type == 'array' ){
        var new_array = [];
        for( var i=1; i<=arr.length; i+=1 ){
            new_array += array_to_json( arr[i], lvl+1 );
        }
        if(lvl>0){
            return "[ " + new_array.join(", ") + " ]";
        }else{
            return "[\n\t" + new_array.join(", \n\t") + "\n]";
        }
    }else{
        return arr;
    }
}

function _get_bonds( a, f, depth, prev, i, bond_acc ){
    var bonds = connected(prev, f);
    var ab = bonds.atoms;
    var bondlist = [];
    for(b in ab){
        if( prev.atomno != b.atomno ){
            var bonddata = [];
            bonddata += b.atomno;
            bonddata += distance(a, b);
            bond_acc[i] += [bonddata];
            if(i<depth-1){
                bond_acc = _get_bonds( a, f, depth, b, i+1, bond_acc );
            }
        }
    }
    return bond_acc;
}

function get_bonds( a, f, depth ){
    var bond_acc = [];
    for( var j=0; j<depth; j+=1 ){
        bond_acc += [[['"foo"','"bar"', j]]];
    }
    return _get_bonds( a, f, depth, a, 1, bond_acc );
}





function flatland_hbond( sele ){
    select *;
    hbonds delete;

    select not hydrogen and ( @sele or within(4, @sele) );
    set hbondsRasmol FALSE;
    set hbondsAngleMinimum 60;
    set hbondsDistanceMaximum 3.9;
    calculate hbonds;
    select none;
    set bondModeOr true;

    var hbonds = connected("hbond");# and not @sele;

    return hbonds;
}


function flatland_polar( sele ){
    var polardata = [];
    var hb = { none };
    var hbonds = flatland_hbond( sele );
    var pi = hbonds.atoms;
    for(a in pi){
        var x1 = connected(@a, @sele).atoms;
        var x2 = connected("hbond").atoms;
        #var x3 = connected(@sele, @a).atoms;
        var x4 = { connected("hbond", @a) }
        if( { @x2 and (@x1 and (sidechain or not protein)) }.count ){
            for( hba in @x4 ){
                if( { @hba and @f and ((@hba and (sidechain or not protein)) or (@a and (sidechain or not protein))) }.count ){
                    var podata = [];
                    podata += a.resno;
                    podata += a.atomno;
                    podata += hba.atomno;
                    podata += distance(a, hba);
                    #podata += '"'+@x4.atomno.all[1]+'"';
                    #podata += '"'+x3[1].atomno+'"';
                    podata += x1[1].atomno;
                    podata += x2[1].atomno;
                    hb = { @hb or a };
                    polardata += [ podata ];
                }
            }
        }
    }
    select *;
    hbonds delete;
    select none;
    return [ polardata, hb ];
}


function flatland_focus( sele, sele2, pplane, hb, split_contact_residues ){
    var pn = pplane%4;
    var uv = point( -pn.x, -pn.y, -pn.z );
    var av = point( pn.y, -pn.x, 0 );
    var bv = cross( pn, av );

    var sele2 = { @sele or within(GROUP, @hb) };

    var focusdata = [];

    for(a in sele2){
        var bonds = connected(a, sele2);
        var ab = bonds.atoms;
        var bondlist = [];
        var bondlist2 = [];
        var bondlist3 = [];
        var bondlist4 = [];
        var bondlist5 = [];
        for(b in ab){
            if( a.atomno != b.atomno && ( {@a and @sele}.count || {@b and @sele}.count || a.resno == b.resno || !split_contact_residues ) ){
                draw_bond_intersection( pplane, a, b );
                var bonddata = [];
                bonddata += b.atomno;
                bonddata += distance(a, b);
                bondlist += [bonddata];
                var bonds2 = connected(b, sele2);
                var ab2 = bonds2.atoms;
                for(b2 in ab2){
                    if( b.atomno != b2.atomno ){
                        var bonddata2 = [];
                        bonddata2 += b2.atomno;
                        bonddata2 += distance(a, b2);
                        bondlist2 += [bonddata2];
                        var bonds3 = connected(b2, sele2);
                        var ab3 = bonds3.atoms;
                        for(b3 in ab3){
                            if( b2.atomno != b3.atomno ){
                                var bonddata3 = [];
                                bonddata3 += b3.atomno;
                                bonddata3 += distance(a, b3);
                                bondlist3 += [bonddata3];
                                var bonds4 = connected(b3, sele2);
                                var ab4 = bonds4.atoms;
                                for(b4 in ab4){
                                    if( b3.atomno != b4.atomno ){
                                        var bonddata4 = [];
                                        bonddata4 += b4.atomno;
                                        bonddata4 += distance(a, b4);
                                        bondlist4 += [bonddata4];
                                        var bonds5 = connected(b4, sele2);
                                        var ab5 = bonds5.atoms;
                                        for(b5 in ab5){
                                            if( b4.atomno != b5.atomno ){
                                                var bonddata5 = [];
                                                bonddata5 += b5.atomno;
                                                bonddata5 += distance(a, b5);
                                                bondlist5 += [bonddata5];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        var ring_members = {@sele2}.find("SMARTS", "[R]");
        var ring = { @a and @ring_members }.length;
        var bbone = { @a and backbone }.length;
        var i = draw_intersection( pplane, a );
        var i0 = point(0, i*av, i*bv);    
        #var name = "i_" + provi_uid();
        #draw id @name @i0 radius 0.2 color orange;
        var atomdata = [];
        atomdata += a.atomno;
        atomdata += [bondlist];
        atomdata += [[ a.x, a.y, a.z ]];
        atomdata += [[ i0.x, i0.y, i0.z ]];
        atomdata += [[ a.color.x, a.color.y, a.color.z ]];
        atomdata += [bondlist2];
        atomdata += [bondlist3];
        atomdata += [bondlist4];
        atomdata += [bondlist5];
        atomdata += ring+"";
        atomdata += bbone+"";
        atomdata += '"'+a.atomname+'"';
        #atomdata += [ get_bonds( a, sele, 4 ) ];
        focusdata += [ atomdata ];
    }

    return focusdata;
}



function flatland_vdw( sele, sele2, pplane ){
    var pn = pplane%4;
    var uv = point( -pn.x, -pn.y, -pn.z );
    var av = point( pn.y, -pn.x, 0 );
    var bv = cross( pn, av );

    var vdwdata = [];
    var hi = { within(GROUP, within(4.0, @sele)) and *.CA and not @sele2 };
    select { within(GROUP, @hi) }; wireframe 0.1; cpk off;
    for(a in hi){
        var ag = { within(GROUP, @a) };
        var ac = ag.XYZ;
        var md = mindist( ag, sele );
        var md1 = md[2];
        var md2 = md[3];
        var mda1 = { atomno = md1 };
        var mda2 = { atomno = md2 };
        var v = { atomno = md2 }.XYZ - { atomno = md1 }.XYZ;
        #draw id @{provi_uid()} vector @mda1 @v color @{ color("low", 30, 90, vec_angle(v,pn)) };
        #draw id @{provi_uid()} vector @mda1 @{pn*-4} color white;
        
        var i = draw_intersection( pplane, mda1.XYZ, 'orange' );
        var i0 = point(0, i*av, i*bv);
        
        var plist = [];
        for(ba in hi){
            if( a.resno != ba.resno ){
                var pdata = [];
                pdata += ba.resno;
                pdata += distance(ac, { within(GROUP, @ba) }.XYZ);
                plist += [pdata];
            }
        }
        #plist = [];

        var alist = [];
        for(aag in ag){
            var md_aag = mindist( aag, sele );
            var adata = [];
            adata += [md_aag];
            alist += [adata];
        }
        #alist = [];

        var nbdata = [];
        nbdata += a.resno
        nbdata += [md]
        nbdata += [[ a.x, a.y, a.z ]];
        nbdata += [[ i0.x, i0.y, i0.z ]];
        nbdata += [plist];
        nbdata += vec_angle( v, pn );
        nbdata += '"'+a.group1+'"';
        nbdata += [alist];

        vdwdata += [nbdata];
    }

    return vdwdata;
}


function flatland_data( sele, pplane, split_contact_residues ){
    select none;
    selectionHalos off;
    draw off;

    select *;
    hbonds delete;

    if( pplane==0 ){
        pplane = view_plane();
    }

    var pn = pplane%4;
    var uv = point( -pn.x, -pn.y, -pn.z );
    var av = point( pn.y, -pn.x, 0 );
    var bv = cross( pn, av );

    #draw id "pn" vector @c @pn color pink;
    #draw id "uv" vector @c @uv color red;
    #draw id "av" vector @c @av color red;
    #draw id "bv" vector @c @bv color red;


    var polar_hb = flatland_polar( sele );
    var polardata = polar_hb[1];
    var hb = polar_hb[2];

    var sele2 = { @sele or within(GROUP, @hb) };

    var focusdata = flatland_focus( sele, sele2, pplane, hb, split_contact_residues );

    var vdwdata = flatland_vdw( sele, sele2, pplane );

    flatland_hbond( sele );

    var hi = { within(GROUP, within(4.0, @sele)) and *.CA and not @sele2 };
    background black;
    display within(GROUP, (@sele or @sele2 or @hi or @hb));
    select displayed; wireframe 0.05;
    select within(GROUP, @hb); wireframe 0.12;
    select @sele; cpk 20%; wireframe 0.2;
    center displayed;
    zoom (displayed) 100;
    var d = {displayed}.distance({displayed});
    set rotationRadius @{d*2};
    select *; cartoon off;
    select none;
    selectionHalos on;

    return array_to_json([ focusdata, polardata, vdwdata ]);
}




